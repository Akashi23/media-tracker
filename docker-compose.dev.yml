version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: media-tracker-postgres-dev
    environment:
      POSTGRES_DB: media_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - media-tracker-network-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: media-tracker-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - media-tracker-network-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go Backend (Development with hot reload)
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile.dev
    container_name: media-tracker-backend-dev
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=media_tracker
      - DB_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - JWT_SECRET=dev-secret-key-change-in-production
      - JWT_EXPIRY=24
    ports:
      - "8080:8080"
    volumes:
      - ./back:/app
      - go_modules:/go/pkg/mod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - media-tracker-network-dev
    restart: unless-stopped
    command: air -c .air.toml

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  go_modules:
    driver: local

networks:
  media-tracker-network-dev:
    driver: bridge
